pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
function _init()

 -- fill map
 for x = 0,16 do
  for y = 0,16 do
   if x % 2 == 1 and y % 2 == 1 then
    mset(x+16, y, 2)
   end
   mset(x, y, 1)
  end
 end

 course = downhill:new(-10000, 1)

 -- set up flags
 -- this is the wrong way to do
 --  this.
 flg_list = {}
 flg_list.x = {}
 flg_list.y = {}

 for i = 1, 500 do
  flg_list.x[i] = flr(rnd(100))
  flg_list.y[i] = flr(rnd(3000)) + player.world_y
 end

 -- debug stepping
 debug = false

end


function _update60()

 if btnp(4) or not debug then
 	player:update()
  course:update(player)
 end
end

function _draw()

 if btnp(4) or not debug then
  cls()

  map(0, 0, 0, 0, 16, 16)

  camera(player.cx, player.cy)

  for xo = 0,2 do
   for yo = 0,2 do
    map(16, 0, 128 * (xo -1), 128 * (yo -1), 16, 16)
   end
  end

  -- reset camera
  if (player.cx > 127 or player.cx < -127) player.cx = 0
  if (player.cy > 127 or player.cy < -127) player.cy = 0

  camera(0,0)

  -- draw flags
  --  also currently wrong, will fix later
  for i = 1,10 do
   if flg_list.y[i] > player.world_y - 128 and flg_list.y[i] < player.world_y + 128 then
    spr(4, flg_list.x[i] - player.world_x, flg_list.y[i] - player.world_y)
   end
  end

  player:draw()
  course:draw(player)

 end
end
-->8
#include player_class.lua
#include downhill.lua

__gfx__
00000000777777770000000000000000008885000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000777777770000000000100100008885000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700777777770000000000100100008885000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000777777770006000000100100000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000777777770000000000100100000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700777777770000000000100100000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000777777770000000000100100000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000777777770000000000000000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
